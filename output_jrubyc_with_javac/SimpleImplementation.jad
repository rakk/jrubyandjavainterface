// Decompiled by Jad v1.5.8e. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.geocities.com/kpdus/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   SimpleImplementation.java

import org.jruby.*;
import org.jruby.javasupport.util.RuntimeHelpers;
import org.jruby.runtime.builtin.IRubyObject;
import simplejavainterface.SimpleJavaInterface;

public class SimpleImplementation extends RubyObject
    implements SimpleJavaInterface
{

    private SimpleImplementation(Ruby ruby, RubyClass rubyclass)
    {
        super(ruby, rubyclass);
    }

    public static IRubyObject __allocate__(Ruby ruby, RubyClass rubyclass)
    {
        return new SimpleImplementation(ruby, rubyclass);
    }

    public SimpleImplementation()
    {
        this(__ruby__, __metaclass__);
        RuntimeHelpers.invoke(__ruby__.getCurrentContext(), this, "initialize");
    }

    public void testingMethod()
    {
        IRubyObject irubyobject = RuntimeHelpers.invoke(__ruby__.getCurrentContext(), this, "testingMethod");
    }

    private static final Ruby __ruby__;
    private static final RubyClass __metaclass__;

    static 
    {
        __ruby__ = Ruby.getGlobalRuntime();
        String s = (new StringBuilder("require 'java'\n\njava_import \"simplejavainterface.SimpleJavaInterface\"\n\nclass SimpleImplementation\n  java_implements Java::simplejavainterface.SimpleJavaInterface\n \n  java_signature 'void testingMethod()'\n\tdef testingMethod()\n\t\tp \"testing method implemented in JRuby\"\n\tend\nend\n")).toString();
        __ruby__.executeScript(s, "SimpleImplementation.rb");
        RubyClass rubyclass = __ruby__.getClass("SimpleImplementation");
        rubyclass.setRubyStaticAllocator(SimpleImplementation);
        if(rubyclass == null)
        {
            throw new NoClassDefFoundError("Could not load Ruby class: SimpleImplementation");
        } else
        {
            __metaclass__ = rubyclass;
        }
    }
}
